---
description: YAML conventions and best practices for this homelab repository
globs:
  - "**/*.yaml"
  - "**/*.yml"
  - "kubernetes/**/*.yaml"
  - "kubernetes/**/*.yml"
  - "talos/**/*.yaml"
  - "talos/**/*.yml"
  - ".github/**/*.yaml"
  - ".github/**/*.yml"
alwaysApply: true

---
# YAML Conventions for Homelab Repository

## YAML Anchors and Aliases

### When to Use Anchors

- **Use anchors (`&name`) when a value is repeated multiple times within the same YAML document**
- **Don't use anchors across document boundaries** (separated by `---`)
- **Don't use anchors for single-use values** - it adds unnecessary complexity

### Anchor Naming Conventions

- Use descriptive names like `&app`, `&namespace`, `&repo`
- Keep anchor names short but meaningful
- Use lowercase with hyphens for multi-word anchors

### Examples

#### ✅ Correct - Anchors within same document

```yaml
# First document - no anchors needed
---
apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: longhorn
  namespace: longhorn-system

# Second document - use anchors for repeated values
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app longhorn
spec:
  chart:
    spec:
      chart: *app  # References the name above
```

```

#### ❌ Incorrect - Anchors across documents

```yaml
# First document
---
metadata:
  name: &repo longhorn  # Don't define anchor here

# Second document - can't reference &repo from above
---
spec:
  sourceRef:
    name: *repo  # This will fail!
```

## File Structure Conventions

### HelmRelease Files

- Use `HelmRepository` for chart sources
- Include proper yaml-language-server schemas
- Use consistent remediation settings (retries, cleanupOnFail)
- Reference ConfigMaps for values via `valuesFrom`

### Flux Kustomization Files

- Always include `prune: true`
- Use YAML anchors for repeated values like `&app` and `&namespace`
- Include proper health checks and decryption settings
- Set appropriate intervals and timeouts

### Values Files

- Store Helm values in `./helm/values.yaml`
- Use ConfigMap generation in app-level kustomization
- Include `kustomizeconfig.yaml` for proper name references

## Schema Validation

Always include yaml-language-server schemas for proper validation:

```yaml
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
```

## Common Patterns

- Use `&app` for application names
- Use `&namespace` for namespace references
- Reference anchors with `*app` and `*namespace`
- Keep documents focused and avoid unnecessary repetition
