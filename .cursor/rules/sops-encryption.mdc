---
alwaysApply: false
description: "SOPS encryption patterns and conventions for secure secrets management with AGE encryption in the homelab repository"

---

# SOPS Encryption Guide for Homelab Repository

## Overview
This repository uses SOPS (Secrets OPerationS) with AGE encryption to securely store sensitive configuration data like OAuth credentials, API keys, and other secrets.

## Configuration

### SOPS Configuration File
- **Main Config**: [.sops.yaml](mdc:.sops.yaml)
  - Automatically detects files matching patterns
  - Uses AGE encryption with your public key
  - Encrypts only `data` and `stringData` fields

### AGE Key Management
- **Private Key**: `age.key` (in repository root, not committed to git)
- **Public Key**: `age1ah5azswjpvcjylvh3w4mr0vzhrgh3dzjq7gh2jrxq5sw9789hquqt6kg6p`
- **Environment Variable**: `SOPS_AGE_KEY_FILE` set in [Taskfile.yaml](mdc:Taskfile.yaml)

## File Patterns

### Automatic Encryption
Files matching these patterns are automatically encrypted:
- `talos/.*\.sops\.ya?ml` - Talos Linux secrets
- `(bootstrap|kubernetes)/.*\.sops\.ya?ml` - Kubernetes and bootstrap secrets

### Naming Convention
- **Encrypted files**: Use `.sops.yaml` extension
- **Example**: `secret.sops.yaml`, `cluster-secrets.sops.yaml`

## Encryption Commands

### Encrypt a File
```bash
# Encrypt in place (recommended)
sops --encrypt -i path/to/secret.sops.yaml

# Encrypt with output redirection
sops --encrypt path/to/secret.sops.yaml > encrypted.yaml
```

### Decrypt a File
```bash
# Decrypt in place
sops --decrypt -i path/to/secret.sops.yaml

# Decrypt to stdout
sops --decrypt path/to/secret.sops.yaml
```

### Edit Encrypted Files
```bash
# Edit directly (opens in default editor)
sops path/to/secret.sops.yaml

# View without decrypting
sops path/to/secret.sops.yaml
```

## Secret Structure

### Basic Secret Template
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: my-namespace
type: Opaque
stringData:
  # These fields will be automatically encrypted
  API_KEY: "your-actual-api-key"
  SECRET_VALUE: "your-actual-secret"
```

### After Encryption
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: my-namespace
type: Opaque
stringData:
  API_KEY: ENC[AES256_GCM,data:...]
  SECRET_VALUE: ENC[AES256_GCM,data:...]
sops:
  age:
    - recipient: age1ah5azswjpvcjylvh3w4mr0vzhrgh3dzjq7gh2jrxq5sw9789hquqt6kg6p
      enc: |
        -----BEGIN AGE ENCRYPTED FILE-----
        ...
        -----END AGE ENCRYPTED FILE-----
  lastmodified: "2025-01-XX..."
  mac: ENC[AES256_GCM,data:...]
  encrypted_regex: ^(data|stringData)$
  mac_only_encrypted: true
  version: 3.10.2
```

## Flux Integration

### Kustomization Configuration
```yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: my-app
spec:
  decryption:
    provider: sops
    secretRef:
      name: sops-age
```

### SOPS Age Secret
- **Location**: [kubernetes/components/common/sops/sops-age.sops.yaml](mdc:kubernetes/components/common/sops/sops-age.sops.yaml)
- **Purpose**: Provides AGE key for Flux to decrypt secrets
- **Namespace**: Automatically available to all Flux kustomizations

## Best Practices

### Security
- **Never commit unencrypted secrets** to git
- **Use descriptive names** for secret files
- **Encrypt immediately** after adding sensitive data
- **Verify encryption** before committing

### File Management
- **Backup unencrypted files** before encryption (if needed)
- **Use consistent naming** patterns
- **Group related secrets** in the same file
- **Document secret purposes** in comments

### Workflow
1. Create/update secret file with sensitive data
2. Encrypt using `sops --encrypt -i`
3. Verify encryption worked
4. Commit encrypted file to git
5. Flux automatically decrypts during deployment

## Troubleshooting

### Common Issues
1. **AGE key not found**: Check `age.key` exists in repository root
2. **Encryption failed**: Verify SOPS configuration in `.sops.yaml`
3. **Flux can't decrypt**: Check `sops-age` secret is available
4. **File not encrypted**: Verify file matches pattern in `.sops.yaml`

### Debug Commands
```bash
# Check if file is encrypted
grep -q "ENC\[" path/to/secret.sops.yaml && echo "Encrypted" || echo "Not encrypted"

# Verify SOPS configuration
sops --version
sops --help

# Check AGE key
ls -la age.key
```

## Examples in Repository

### Tailscale OAuth Secret
- **File**: [kubernetes/apps/network/tailscale/app/secret.sops.yaml](mdc:kubernetes/apps/network/tailscale/app/secret.sops.yaml)
- **Purpose**: Tailscale operator OAuth credentials
- **Fields**: `TAILSCALE_OAUTH_CLIENT_ID`, `TAILSCALE_OAUTH_CLIENT_SECRET`

### Cloudflare Tunnel Secret
- **File**: [kubernetes/apps/network/cloudflare-tunnel/app/secret.sops.yaml](mdc:kubernetes/apps/network/cloudflare-tunnel/app/secret.sops.yaml)
- **Purpose**: Cloudflare tunnel authentication
- **Fields**: `TUNNEL_TOKEN`

### Cluster Secrets
- **File**: [kubernetes/components/common/sops/cluster-secrets.sops.yaml](mdc:kubernetes/components/common/sops/cluster-secrets.sops.yaml)
- **Purpose**: Global cluster configuration secrets

## References
- [SOPS Documentation](https://github.com/mozilla/sops)
- [AGE Encryption](https://age-encryption.org/)
- [Flux SOPS Integration](https://fluxcd.io/docs/components/kustomize/kustomization/#decrypting-secrets)# SOPS Encryption Guide for Homelab Repository

## Overview
This repository uses SOPS (Secrets OPerationS) with AGE encryption to securely store sensitive configuration data like OAuth credentials, API keys, and other secrets.

## Configuration

### SOPS Configuration File
- **Main Config**: [.sops.yaml](mdc:.sops.yaml)
  - Automatically detects files matching patterns
  - Uses AGE encryption with your public key
  - Encrypts only `data` and `stringData` fields

### AGE Key Management
- **Private Key**: `age.key` (in repository root, not committed to git)
- **Public Key**: `age1ah5azswjpvcjylvh3w4mr0vzhrgh3dzjq7gh2jrxq5sw9789hquqt6kg6p`
- **Environment Variable**: `SOPS_AGE_KEY_FILE` set in [Taskfile.yaml](mdc:Taskfile.yaml)

## File Patterns

### Automatic Encryption
Files matching these patterns are automatically encrypted:
- `talos/.*\.sops\.ya?ml` - Talos Linux secrets
- `(bootstrap|kubernetes)/.*\.sops\.ya?ml` - Kubernetes and bootstrap secrets

### Naming Convention
- **Encrypted files**: Use `.sops.yaml` extension
- **Example**: `secret.sops.yaml`, `cluster-secrets.sops.yaml`

## Encryption Commands

### Encrypt a File
```bash
# Encrypt in place (recommended)
sops --encrypt -i path/to/secret.sops.yaml

# Encrypt with output redirection
sops --encrypt path/to/secret.sops.yaml > encrypted.yaml
```

### Decrypt a File
```bash
# Decrypt in place
sops --decrypt -i path/to/secret.sops.yaml

# Decrypt to stdout
sops --decrypt path/to/secret.sops.yaml
```

### Edit Encrypted Files
```bash
# Edit directly (opens in default editor)
sops path/to/secret.sops.yaml

# View without decrypting
sops path/to/secret.sops.yaml
```

## Secret Structure

### Basic Secret Template
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: my-namespace
type: Opaque
stringData:
  # These fields will be automatically encrypted
  API_KEY: "your-actual-api-key"
  SECRET_VALUE: "your-actual-secret"
```

### After Encryption
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: my-namespace
type: Opaque
stringData:
  API_KEY: ENC[AES256_GCM,data:...]
  SECRET_VALUE: ENC[AES256_GCM,data:...]
sops:
  age:
    - recipient: age1ah5azswjpvcjylvh3w4mr0vzhrgh3dzjq7gh2jrxq5sw9789hquqt6kg6p
      enc: |
        -----BEGIN AGE ENCRYPTED FILE-----
        ...
        -----END AGE ENCRYPTED FILE-----
  lastmodified: "2025-01-XX..."
  mac: ENC[AES256_GCM,data:...]
  encrypted_regex: ^(data|stringData)$
  mac_only_encrypted: true
  version: 3.10.2
```

## Flux Integration

### Kustomization Configuration
```yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: my-app
spec:
  decryption:
    provider: sops
    secretRef:
      name: sops-age
```

### SOPS Age Secret
- **Location**: [kubernetes/components/common/sops/sops-age.sops.yaml](mdc:kubernetes/components/common/sops/sops-age.sops.yaml)
- **Purpose**: Provides AGE key for Flux to decrypt secrets
- **Namespace**: Automatically available to all Flux kustomizations

## Best Practices

### Security
- **Never commit unencrypted secrets** to git
- **Use descriptive names** for secret files
- **Encrypt immediately** after adding sensitive data
- **Verify encryption** before committing

### File Management
- **Backup unencrypted files** before encryption (if needed)
- **Use consistent naming** patterns
- **Group related secrets** in the same file
- **Document secret purposes** in comments

### Workflow
1. Create/update secret file with sensitive data
2. Encrypt using `sops --encrypt -i`
3. Verify encryption worked
4. Commit encrypted file to git
5. Flux automatically decrypts during deployment

## Troubleshooting

### Common Issues
1. **AGE key not found**: Check `age.key` exists in repository root
2. **Encryption failed**: Verify SOPS configuration in `.sops.yaml`
3. **Flux can't decrypt**: Check `sops-age` secret is available
4. **File not encrypted**: Verify file matches pattern in `.sops.yaml`

### Debug Commands
```bash
# Check if file is encrypted
grep -q "ENC\[" path/to/secret.sops.yaml && echo "Encrypted" || echo "Not encrypted"

# Verify SOPS configuration
sops --version
sops --help

# Check AGE key
ls -la age.key
```

## Examples in Repository

### Tailscale OAuth Secret
- **File**: [kubernetes/apps/network/tailscale/app/secret.sops.yaml](mdc:kubernetes/apps/network/tailscale/app/secret.sops.yaml)
- **Purpose**: Tailscale operator OAuth credentials
- **Fields**: `TAILSCALE_OAUTH_CLIENT_ID`, `TAILSCALE_OAUTH_CLIENT_SECRET`

### Cloudflare Tunnel Secret
- **File**: [kubernetes/apps/network/cloudflare-tunnel/app/secret.sops.yaml](mdc:kubernetes/apps/network/cloudflare-tunnel/app/secret.sops.yaml)
- **Purpose**: Cloudflare tunnel authentication
- **Fields**: `TUNNEL_TOKEN`

### Cluster Secrets
- **File**: [kubernetes/components/common/sops/cluster-secrets.sops.yaml](mdc:kubernetes/components/common/sops/cluster-secrets.sops.yaml)
- **Purpose**: Global cluster configuration secrets

## References
- [SOPS Documentation](https://github.com/mozilla/sops)
- [AGE Encryption](https://age-encryption.org/)
- [Flux SOPS Integration](https://fluxcd.io/docs/components/kustomize/kustomization/#decrypting-secrets)