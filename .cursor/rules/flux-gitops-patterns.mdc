---
alwaysApply: false
description: "Flux GitOps patterns and conventions for homelab Kubernetes applications"
globs:
  - "kubernetes/apps/**/ks.yaml"
  - "kubernetes/apps/**/helmrelease.yaml"
  - "kubernetes/apps/**/kustomization.yaml"
  - "kubernetes/apps/**/values.yaml"
  - "kubernetes/bootstrap/**/*.yaml"
  - "kubernetes/flux/**/*.yaml"

---

# Flux GitOps Patterns

## Application Structure

Every application in this repository follows a consistent structure pattern:

```
kubernetes/apps/<category>/<app-name>/
├── app/
│   ├── helm/
│   │   ├── values.yaml           # Helm configuration values
│   │   └── kustomizeconfig.yaml  # ConfigMap name references
│   ├── helmrelease.yaml          # Flux HelmRelease + OCI Repository
│   ├── kustomization.yaml        # App-level kustomization
│   └── (other resources)         # Additional Kubernetes resources
├── ks.yaml                       # Flux Kustomization for GitOps
└── (parent) kustomization.yaml   # Category-level kustomization
```

## Key Components

### 1. Flux Kustomization (ks.yaml)

Every app has a [ks.yaml](mdc:kubernetes/apps/cert-manager/cert-manager/ks.yaml) file that:

- Defines the Flux Kustomization resource
- Specifies source and target namespaces
- Includes health checks and intervals
- Sets `prune: true` for cleanup
- Configures decryption for SOPS secrets

### 2. HelmRelease Structure

Applications use [HelmRelease](mdc:kubernetes/apps/cert-manager/cert-manager/app/helmrelease.yaml) with:

- **OCI Repository**: Modern chart source approach
- **ConfigMap values**: Values stored in generated ConfigMaps
- **Remediation**: Retry policies and cleanup on failure
- **Intervals**: Appropriate reconciliation timing

### 3. Kustomization Pattern

App-level [kustomization.yaml](mdc:kubernetes/apps/cert-manager/cert-manager/app/kustomization.yaml):

- References all app resources
- Generates ConfigMaps from values.yaml
- Includes kustomizeconfig.yaml for name references
- Organizes resources logically

## Common Patterns

### OCI Repository Sources

```yaml
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: app-name
spec:
  interval: 5m
  ref:
    tag: v1.2.3  # Pin specific versions
  url: oci://registry.example.com/charts
```

### HelmRelease with ConfigMap Values

```yaml
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: app-name
spec:
  valuesFrom:
    - kind: ConfigMap
      name: app-name-values  # Generated by kustomize
```

### Flux Kustomization

```yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: app-name
spec:
  interval: 10m
  path: ./app
  prune: true
  sourceRef:
    kind: GitRepository
    name: flux-system
  targetNamespace: app-namespace
```

## Category Organization

Applications are organized by functional category:

- **cert-manager**: Certificate management and TLS
- **default**: User applications and services
- **flux-system**: Flux operator and instance management
- **kube-system**: Core Kubernetes system components
- **network**: Networking, DNS, and ingress
- **storage**: Storage solutions and volume management

## Best Practices

1. **Version Pinning**: Always pin chart versions for stability
2. **Resource Limits**: Set appropriate intervals and timeouts
3. **Health Checks**: Include health checks for critical components
4. **Secret Management**: Use SOPS encryption for sensitive data
5. **Cleanup**: Always set `prune: true` in Flux Kustomizations
6. **Documentation**: Update parent kustomization files when adding apps

## Validation Commands

```bash
# Check Flux status
flux check
flux get sources git -A
flux get ks -A
flux get hr -A

# Validate manifests
kubectl apply --dry-run=client -f kubernetes/
```

# Flux GitOps Patterns

## Application Structure

Every application in this repository follows a consistent structure pattern:

```
kubernetes/apps/<category>/<app-name>/
├── app/
│   ├── helm/
│   │   ├── values.yaml           # Helm configuration values
│   │   └── kustomizeconfig.yaml  # ConfigMap name references
│   ├── helmrelease.yaml          # Flux HelmRelease + OCI Repository
│   ├── kustomization.yaml        # App-level kustomization
│   └── (other resources)         # Additional Kubernetes resources
├── ks.yaml                       # Flux Kustomization for GitOps
└── (parent) kustomization.yaml   # Category-level kustomization
```

## Key Components

### 1. Flux Kustomization (ks.yaml)

Every app has a [ks.yaml](mdc:kubernetes/apps/cert-manager/cert-manager/ks.yaml) file that:

- Defines the Flux Kustomization resource
- Specifies source and target namespaces
- Includes health checks and intervals
- Sets `prune: true` for cleanup
- Configures decryption for SOPS secrets

### 2. HelmRelease Structure

Applications use [HelmRelease](mdc:kubernetes/apps/cert-manager/cert-manager/app/helmrelease.yaml) with:

- **OCI Repository**: Modern chart source approach
- **ConfigMap values**: Values stored in generated ConfigMaps
- **Remediation**: Retry policies and cleanup on failure
- **Intervals**: Appropriate reconciliation timing

### 3. Kustomization Pattern

App-level [kustomization.yaml](mdc:kubernetes/apps/cert-manager/cert-manager/app/kustomization.yaml):

- References all app resources
- Generates ConfigMaps from values.yaml
- Includes kustomizeconfig.yaml for name references
- Organizes resources logically

## Common Patterns

### OCI Repository Sources

```yaml
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: app-name
spec:
  interval: 5m
  ref:
    tag: v1.2.3  # Pin specific versions
  url: oci://registry.example.com/charts
```

### HelmRelease with ConfigMap Values

```yaml
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: app-name
spec:
  valuesFrom:
    - kind: ConfigMap
      name: app-name-values  # Generated by kustomize
```

### Flux Kustomization

```yaml
apiVersion: kustomize.toolkit.fluxcd.io/v1
kind: Kustomization
metadata:
  name: app-name
spec:
  interval: 10m
  path: ./app
  prune: true
  sourceRef:
    kind: GitRepository
    name: flux-system
  targetNamespace: app-namespace
```

## Category Organization

Applications are organized by functional category:

- **cert-manager**: Certificate management and TLS
- **default**: User applications and services
- **flux-system**: Flux operator and instance management
- **kube-system**: Core Kubernetes system components
- **network**: Networking, DNS, and ingress
- **storage**: Storage solutions and volume management

## Best Practices

1. **Version Pinning**: Always pin chart versions for stability
2. **Resource Limits**: Set appropriate intervals and timeouts
3. **Health Checks**: Include health checks for critical components
4. **Secret Management**: Use SOPS encryption for sensitive data
5. **Cleanup**: Always set `prune: true` in Flux Kustomizations
6. **Documentation**: Update parent kustomization files when adding apps

## Validation Commands

```bash
# Check Flux status
flux check
flux get sources git -A
flux get ks -A
flux get hr -A

# Validate manifests
kubectl apply --dry-run=client -f kubernetes/
```
